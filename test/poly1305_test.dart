import 'dart:async';
import 'dart:typed_data';
import 'package:chacha/export.dart';
import 'package:test/test.dart';

void main() {
  for (int i = 0; i < poly1305TestVectors.length; ++i) {
    final Poly1305TestVector vector = poly1305TestVectors[i];
    test('The Poly1305 Message Authentication Code Test Vector ${(i + 1)}', () {
      final Poly1305 poly1305 = Poly1305(key: Uint8List.fromList(vector.key));

      final Uint8List message = Uint8List.fromList(vector.message);
      final Uint8List result = poly1305.convert(message);

      expect(result.length, equals(16));
      expect(result, equals(vector.tag));
    });
  }

  for (int i = 0; i < poly1305TestVectors.length; ++i) {
    final Poly1305TestVector vector = poly1305TestVectors[i];
    test(
      'The Poly1305 Stream Message Authentication Code Test Vector ${(i + 1)}',
      () async {
        final Poly1305 poly1305 = Poly1305(key: Uint8List.fromList(vector.key));

        final Uint8List message = Uint8List.fromList(vector.message);

        final Stream<List<int>> transformed = Stream<List<int>>.value(
          message,
        ).transform(poly1305);

        final BytesBuilder builder = BytesBuilder(copy: false);
        await for (final List<int> chunk in transformed) {
          builder.add(chunk);
        }
        final Uint8List result = builder.takeBytes();

        final Uint8List expected = Uint8List.fromList(vector.tag);

        expect(result.length, equals(expected.length));
        expect(result.length, equals(16));
        expect(result, equals(expected));
      },
    );
  }
}

/// A container for Poly1305 test vectors from RFC 8439.
final class Poly1305TestVector {
  const Poly1305TestVector({
    required this.key,
    required this.message,
    required this.tag,
  });

  final List<int> key;
  final List<int> message;
  final List<int> tag;
}

/// Test vectors for Poly1305 message authentication from RFC 8439.
const List<Poly1305TestVector> poly1305TestVectors = <Poly1305TestVector>[
  // Test Vector #1
  Poly1305TestVector(
    key: <int>[
      0x85, 0xd6, 0xbe, 0x78, 0x57, 0x55, 0x6d, 0x33, //
      0x7f, 0x44, 0x52, 0xfe, 0x42, 0xd5, 0x06, 0xa8, //
      0x01, 0x03, 0x80, 0x8a, 0xfb, 0x0d, 0xb2, 0xfd, //
      0x4a, 0xbf, 0xf6, 0xaf, 0x41, 0x49, 0xf5, 0x1b, //
    ],
    message: <int>[
      0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, //
      0x61, 0x70, 0x68, 0x69, 0x63, 0x20, 0x46, 0x6f, //
      0x72, 0x75, 0x6d, 0x20, 0x52, 0x65, 0x73, 0x65, //
      0x61, 0x72, 0x63, 0x68, 0x20, 0x47, 0x72, 0x6f, //
      0x75, 0x70, // "Cryptographic Forum Research Group"
    ],
    tag: <int>[
      0xa8, 0x06, 0x1d, 0xc1, 0x30, 0x51, 0x36, 0xc6, //
      0xc2, 0x2b, 0x8b, 0xaf, 0x0c, 0x01, 0x27, 0xa9, //
    ],
  ),

  // Test Vector #2
  Poly1305TestVector(
    key: <int>[
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    ],
    message: <int>[
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    ],
    tag: <int>[
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    ],
  ),

  // Test Vector #3
  Poly1305TestVector(
    key: <int>[
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x36, 0xe5, 0xf6, 0xb5, 0xc5, 0xe0, 0x60, 0x70, //
      0xf0, 0xef, 0xca, 0x96, 0x22, 0x7a, 0x86, 0x3e, //
    ],
    message: <int>[
      0x41, 0x6e, 0x79, 0x20, 0x73, 0x75, 0x62, 0x6d, // "Any subm"
      0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, // "ission t"
      0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x45, // "o the IE"
      0x54, 0x46, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x6e, // "TF inten"
      0x64, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, // "ded by t"
      0x68, 0x65, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x72, // "he Contr"
      0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x20, 0x66, // "ibutor f"
      0x6f, 0x72, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, // "or publi"
      0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, // "cation a"
      0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x6f, 0x72, // "s all or"
      0x70, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x20, // "part of "
      0x61, 0x6e, 0x20, 0x49, 0x45, 0x54, 0x46, 0x20, // "an IETF "
      0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, // "Internet"
      0x2d, 0x44, 0x72, 0x61, 0x66, 0x74, 0x20, 0x6f, // "-Draft o"
      0x72, 0x20, 0x52, 0x46, 0x43, 0x20, 0x61, 0x6e, // "r RFC an"
      0x64, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x73, 0x74, // "d any st"
      0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, // "atement "
      0x6d, 0x61, 0x64, 0x65, 0x20, 0x77, 0x69, 0x74, // "made wit"
      0x68, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, // "hin the "
      0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, // "context "
      0x6f, 0x66, 0x20, 0x61, 0x6e, 0x20, 0x49, 0x45, // "of an IE"
      0x54, 0x46, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, // "TF activ"
      0x69, 0x74, 0x79, 0x20, 0x69, 0x73, 0x20, 0x63, // "ity is c"
      0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x65, // "onside"
      0x64, 0x20, 0x61, 0x6e, 0x20, 0x22, 0x49, 0x45, // "d an "IE"
      0x54, 0x46, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x72, // "TF Contr"
      0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, // "ibution""
      0x2e, 0x20, 0x53, 0x75, 0x63, 0x68, 0x20, 0x73, // ". Such s"
      0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, // "tatement"
      0x73, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, // "s includ"
      0x65, 0x20, 0x6f, 0x72, 0x61, 0x6c, 0x20, 0x73, // "e oral s"
      0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, // "tatement"
      0x73, 0x20, 0x69, 0x6e, 0x20, 0x49, 0x45, 0x54, // "s in IET"
      0x46, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, // "F sessio"
      0x6e, 0x73, 0x2c, 0x20, 0x61, 0x73, 0x20, 0x77, // "ns, as w"
      0x65, 0x6c, 0x6c, 0x20, 0x61, 0x73, 0x20, 0x77, // "ell as w"
      0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x20, 0x61, // "ritten a"
      0x6e, 0x64, 0x20, 0x65, 0x6c, 0x65, 0x63, 0x74, // "nd elect"
      0x72, 0x6f, 0x6e, 0x69, 0x63, 0x20, 0x63, 0x6f, // "ronic co"
      0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, // "mmunitat"
      0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6d, 0x61, 0x64, // "ions mad"
      0x65, 0x20, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x79, // "e at any"
      0x74, 0x69, 0x6d, 0x65, 0x20, 0x6f, 0x72, 0x20, // "time or "
      0x70, 0x6c, 0x61, 0x63, 0x65, 0x2c, 0x20, 0x77, // "place, w"
      0x68, 0x69, 0x63, 0x68, 0x20, 0x61, 0x72, 0x65, // "hich are"
      0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, // " address"
      0x65, 0x64, 0x20, 0x74, 0x6f, //                 // "ed to"
    ],
    tag: <int>[
      0x36, 0xe5, 0xf6, 0xb5, 0xc5, 0xe0, 0x60, 0x70, //
      0xf0, 0xef, 0xca, 0x96, 0x22, 0x7a, 0x86, 0x3e, //
    ],
  ),

  // Test Vector #4
  Poly1305TestVector(
    key: <int>[
      0x36, 0xe5, 0xf6, 0xb5, 0xc5, 0xe0, 0x60, 0x70, //
      0xf0, 0xef, 0xca, 0x96, 0x22, 0x7a, 0x86, 0x3e, //
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    ],
    message: <int>[
      0x41, 0x6e, 0x79, 0x20, 0x73, 0x75, 0x62, 0x6d, // "Any subm"
      0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, // "ission t"
      0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x45, // "o the IE"
      0x54, 0x46, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x6e, // "TF inten"
      0x64, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, // "ded by t"
      0x68, 0x65, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x72, // "he Contr"
      0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x20, 0x66, // "ibutor f"
      0x6f, 0x72, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, // "or publi"
      0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, // "cation a"
      0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x6f, 0x72, // "s all or"
      0x20, 0x70, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, // " part of"
      0x20, 0x61, 0x6e, 0x20, 0x49, 0x45, 0x54, 0x46, // " an IETF"
      0x20, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, // " Interne"
      0x74, 0x2d, 0x44, 0x72, 0x61, 0x66, 0x74, 0x20, // "t-Draft "
      0x6f, 0x72, 0x20, 0x52, 0x46, 0x43, 0x20, 0x61, // "or RFC a"
      0x6e, 0x64, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x73, // "nd any s"
      0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, // "tatement"
      0x20, 0x6d, 0x61, 0x64, 0x65, 0x20, 0x77, 0x69, // " made wi"
      0x74, 0x68, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, // "thin the"
      0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, // " context"
      0x20, 0x6f, 0x66, 0x20, 0x61, 0x6e, 0x20, 0x49, // " of an I"
      0x45, 0x54, 0x46, 0x20, 0x61, 0x63, 0x74, 0x69, // "ETF acti"
      0x76, 0x69, 0x74, 0x79, 0x20, 0x69, 0x73, 0x20, // "vity is "
      0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, // "consider"
      0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x22, 0x49, // "ed an "I"
      0x45, 0x54, 0x46, 0x20, 0x43, 0x6f, 0x6e, 0x74, // "ETF Cont"
      0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, // "ribution"
      0x22, 0x2e, 0x20, 0x53, 0x75, 0x63, 0x68, 0x20, // "". Such "
      0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, // "statemen"
      0x74, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, // "ts inclu"
      0x64, 0x65, 0x20, 0x6f, 0x72, 0x61, 0x6c, 0x20, // "de oral "
      0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, // "statemen"
      0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x49, 0x45, // "ts in IE"
      0x54, 0x46, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, // "TF sessi"
      0x6f, 0x6e, 0x73, 0x2c, 0x20, 0x61, 0x73, 0x20, // "ons, as "
      0x77, 0x65, 0x6c, 0x6c, 0x20, 0x61, 0x73, 0x20, // "well as "
      0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x20, // "written "
      0x61, 0x6e, 0x64, 0x20, 0x65, 0x6c, 0x65, 0x63, // "and elec"
      0x74, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x20, 0x63, // "tronic c"
      0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, // "ommunica"
      0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6d, 0x61, // "tions ma"
      0x64, 0x65, 0x20, 0x61, 0x74, 0x20, 0x61, 0x6e, // "de at an"
      0x79, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x6f, // "y time o"
      0x72, 0x20, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2c, // "r place,"
      0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x61, // " which a"
      0x72, 0x65, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, // "re addre"
      0x73, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, //     // "ssed to"
    ],
    tag: <int>[
      0xf3, 0x47, 0x7e, 0x7c, 0xd9, 0x54, 0x17, 0xaf, //
      0x89, 0xa6, 0xb8, 0x79, 0x4c, 0x31, 0x0c, 0xf0, //
    ],
  ),

  // Test Vector #5
  Poly1305TestVector(
    key: <int>[
      0x1c, 0x92, 0x40, 0xa5, 0xeb, 0x55, 0xd3, 0x8a, //
      0xf3, 0x33, 0x88, 0x86, 0x04, 0xf6, 0xb5, 0xf0, //
      0x47, 0x39, 0x17, 0xc1, 0x40, 0x2b, 0x80, 0x09, //
      0x9d, 0xca, 0x5c, 0xbc, 0x20, 0x70, 0x75, 0xc0, //
    ],
    message: <int>[
      0x27, 0x54, 0x77, 0x61, 0x73, 0x20, 0x62, 0x72, // "'Twas br"
      0x69, 0x6c, 0x6c, 0x69, 0x67, 0x2c, 0x20, 0x61, // "illig, a"
      0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, // "nd the s"
      0x6c, 0x69, 0x74, 0x68, 0x79, 0x20, 0x74, 0x6f, // "lithy to"
      0x76, 0x65, 0x73, 0x0a, 0x44, 0x69, 0x64, 0x20, // "ves\nDid "
      0x67, 0x79, 0x72, 0x65, 0x20, 0x61, 0x6e, 0x64, // "gyre and"
      0x20, 0x67, 0x69, 0x6d, 0x62, 0x6c, 0x65, 0x20, // " gimble "
      0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, // "in the w"
      0x61, 0x62, 0x65, 0x3a, 0x0a, 0x41, 0x6c, 0x6c, // "abe:\nAll"
      0x20, 0x6d, 0x69, 0x6d, 0x73, 0x79, 0x20, 0x77, // " mimsy w"
      0x65, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, // "ere the "
      0x62, 0x6f, 0x72, 0x6f, 0x67, 0x6f, 0x76, 0x65, // "borogove"
      0x73, 0x2c, 0x0a, 0x41, 0x6e, 0x64, 0x20, 0x74, // "s,\nAnd t"
      0x68, 0x65, 0x20, 0x6d, 0x6f, 0x6d, 0x65, 0x20, // "he mome "
      0x72, 0x61, 0x74, 0x68, 0x73, 0x20, 0x6f, 0x75, // "raths ou"
      0x74, 0x67, 0x72, 0x61, 0x62, 0x65, 0x2e, //     // "tgrabe."
    ],
    tag: <int>[
      0x45, 0x41, 0x66, 0x9a, 0x7e, 0xaa, 0xee, 0x61, //
      0xe7, 0x08, 0xdc, 0x7c, 0xbc, 0xc5, 0xeb, 0x62, //
    ],
  ),

  // Test Vector #6
  Poly1305TestVector(
    key: <int>[
      0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    ],
    message: <int>[
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, //
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, //
    ],
    tag: <int>[
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    ],
  ),

  // Test Vector #7
  Poly1305TestVector(
    key: <int>[
      0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, //
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, //
    ],
    message: <int>[
      0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    ],
    tag: <int>[
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    ],
  ),

  // Test Vector #8
  Poly1305TestVector(
    key: <int>[
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    ],
    message: <int>[
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, //
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, //
      0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, //
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, //
      0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    ],
    tag: <int>[
      0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    ],
  ),

  // Test Vector #9
  Poly1305TestVector(
    key: <int>[
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    ],
    message: <int>[
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, //
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, //
      0xFB, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, //
      0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, //
      0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, //
      0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, //
    ],
    tag: <int>[
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    ],
  ),

  // Test Vector #10
  Poly1305TestVector(
    key: <int>[
      0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    ],
    message: <int>[
      0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, //
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, //
    ],
    tag: <int>[
      0xFA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, //
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, //
    ],
  ),

  // Test Vector #11
  Poly1305TestVector(
    key: <int>[
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    ],
    message: <int>[
      0xE3, 0x35, 0x94, 0xD7, 0x50, 0x5E, 0x43, 0xB9, //
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x33, 0x94, 0xD7, 0x50, 0x5E, 0x43, 0x79, 0xCD, //
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    ],
    tag: <int>[
      0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    ],
  ),

  // Test Vector #12
  Poly1305TestVector(
    key: <int>[
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    ],
    message: <int>[
      0xE3, 0x35, 0x94, 0xD7, 0x50, 0x5E, 0x43, 0xB9, //
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x33, 0x94, 0xD7, 0x50, 0x5E, 0x43, 0x79, 0xCD, //
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    ],
    tag: <int>[
      0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    ],
  ),
];
